{
  "$schema": "https://unpkg.com/@pixpilot/scaffoldfy/schema",
  "description": "Project information prompts for pnpm-turbo-monorepo-template",
  "name": "project-info",
  "variables": [
    {
      "id": "currentYear",
      "value": {
        "type": "exec",
        "value": "node -e \"process.stdout.write(String(new Date().getFullYear()))\""
      }
    }
  ],
  "prompts": [
    {
      "id": "projectName",
      "type": "input",
      "required": true,
      "message": "What is your project name?",
      "default": {
        "type": "exec",
        "value": "node -p \"require('path').basename(process.cwd())\""
      }
    },
    {
      "id": "repoOwner",
      "type": "input",
      "message": "Repository owner (GitHub username or organization)",
      "default": {
        "type": "exec",
        "value": "git remote get-url origin | node -e \"const url=require('fs').readFileSync(0,'utf-8'); console.log(url.match(/[:/]([^/]+)\\/[^/]+(?:\\.git)?$/)[1])\""
      },
      "required": true
    },
    {
      "id": "orgName",
      "type": "input",
      "message": "Organization name for packages (used in package scopes)",
      "default": {
        "type": "exec",
        "value": "git remote get-url origin | node -e \"const url=require('fs').readFileSync(0,'utf-8'); console.log(url.match(/[:/]([^/]+)\\/[^/]+(?:\\.git)?$/)[1])\""
      },
      "required": false
    },
    {
      "id": "author",
      "type": "input",
      "message": "Author name",
      "default": {
        "type": "exec",
        "value": "git config user.name"
      },
      "required": true
    },
    {
      "id": "authorEmail",
      "type": "input",
      "message": "Author email",
      "default": {
        "type": "exec",
        "value": "git config user.email"
      },
      "required": false
    },
    {
      "id": "repoUrl",
      "type": "input",
      "message": "Repository URL",
      "default": {
        "type": "exec",
        "value": "git config --get remote.origin.url"
      },
      "required": false
    },
    {
      "id": "repoName",
      "type": "input",
      "message": "Repository name",
      "default": {
        "type": "exec",
        "value": "git remote get-url origin | node -e \"const url=require('fs').readFileSync(0,'utf-8').trim(); console.log(url.match(/[:/]([^/]+)\\/([^/]+?)(?:\\.git)?$/)[2])\""
      },
      "required": true
    },
    {
      "id": "baseRepoUrl",
      "type": "input",
      "message": "Base repository URL",
      "default": {
        "type": "exec",
        "value": "git remote get-url origin | node -e \"const url=require('fs').readFileSync(0,'utf-8').trim(); const match=url.match(/^(?:https?:\\/\\/|git@)([^/:]+)[:/](.+?)(?:\\.git)?$/); console.log(match ? `https://${match[1]}/${match[2]}` : '')\""
      },
      "required": false
    }
  ]
}
