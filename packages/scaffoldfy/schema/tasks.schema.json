{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Write Tasks Configuration",
  "description": "Configuration for Write task automation and cleanup",
  "type": "object",
  "required": ["$schema", "name"],
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "type": "string",
      "description": "JSON Schema dialect identifier"
    },
    "name": {
      "type": "string",
      "description": "Unique identifier name for this template. Must contain only lowercase letters, digits, and hyphens. Cannot start or end with a hyphen.",
      "pattern": "^[a-z\\d]+(?:-[a-z\\d]+)*$"
    },
    "description": {
      "type": "string",
      "description": "Detailed description of what this Write does"
    },
    "enabled": {
      "description": "Whether this item should be executed/displayed. Can be a boolean, a string expression, or an object with executable or conditional configuration (optional, defaults to true).",
      "default": true,
      "oneOf": [
        {
          "type": "boolean",
          "description": "Static enabled state"
        },
        {
          "type": "string",
          "description": "JavaScript expression to evaluate."
        },
        {
          "type": "object",
          "description": "Conditional enabled configuration",
          "required": ["condition"],
          "properties": {
            "condition": {
              "type": "string",
              "description": "JavaScript expression to evaluate."
            }
          }
        },
        {
          "type": "object",
          "description": "Executable enabled configuration - determines enabled state by running a command",
          "required": ["type", "value"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["exec"],
              "description": "Type of enabled value. 'exec' executes a shell command to determine enabled state."
            },
            "value": {
              "type": "string",
              "description": "Shell command to execute. The command output will be trimmed and parsed as a boolean. Non-empty output or '1', 'true', 'yes' (case-insensitive) evaluates to true."
            }
          }
        }
      ]
    },
    "transformers": {
      "type": "array",
      "description": "Array of transformer definitions",
      "items": { "$ref": "#/$defs/transformerItem" }
    },
    "dependencies": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Names or identifiers of other templates that this Write depends on"
    },
    "extends": {
      "description": "Base Write file(s) to extend from. Can be a local path or URL (http/https). Supports single path or array of paths.",
      "oneOf": [
        {
          "type": "string",
          "description": "Single base Write path or URL"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of base Write paths or URLs"
        }
      ]
    },
    "variables": {
      "type": "array",
      "description": "Top-level global variables available to all tasks. Variables are resolved once at startup and do not require user interaction.",
      "items": { "$ref": "#/$defs/variableItem" }
    },
    "prompts": {
      "type": "array",
      "description": "Top-level global prompts collected once upfront and available to all tasks.",
      "items": { "$ref": "#/$defs/promptItem" }
    },
    "tasks": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["id", "name", "type", "config"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the task"
          },
          "name": {
            "type": "string",
            "description": "Human-readable task name"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of what the task does (optional, defaults to empty string)"
          },
          "required": {
            "type": "boolean",
            "description": "Whether failure of this task should stop the process (optional, defaults to true)",
            "default": true
          },
          "enabled": { "$ref": "#/$defs/enabled" },
          "dependencies": {
            "type": "array",
            "items": { "type": "string" },
            "description": "IDs of tasks that must run before this one"
          },
          "override": { "$ref": "#/$defs/override" },
          "$sourceUrl": { "type": "string" },
          "type": {
            "type": "string",
            "enum": [
              "update-json",
              "write",
              "create",
              "regex-replace",
              "replace-in-file",
              "delete",
              "rename",
              "git-init",
              "exec",
              "move",
              "copy",
              "append",
              "mkdir"
            ],
            "description": "Type of task to execute"
          },
          "config": {
            "type": "object",
            "description": "Task-specific configuration"
          }
        },
        "oneOf": [
          {
            "properties": {
              "type": { "const": "update-json" },
              "config": { "$ref": "#/$defs/config-update-json" }
            }
          },
          {
            "properties": {
              "type": { "const": "write" },
              "config": { "$ref": "#/$defs/config-write" }
            }
          },
          {
            "properties": {
              "type": { "const": "create" },
              "config": { "$ref": "#/$defs/config-create" }
            }
          },
          {
            "properties": {
              "type": { "const": "regex-replace" },
              "config": { "$ref": "#/$defs/config-regex-replace" }
            }
          },
          {
            "properties": {
              "type": { "const": "replace-in-file" },
              "config": { "$ref": "#/$defs/config-replace-in-file" }
            }
          },
          {
            "properties": {
              "type": { "const": "delete" },
              "config": { "$ref": "#/$defs/config-delete" }
            }
          },
          {
            "properties": {
              "type": { "const": "rename" },
              "config": { "$ref": "#/$defs/config-rename" }
            }
          },
          {
            "properties": {
              "type": { "const": "git-init" },
              "config": { "$ref": "#/$defs/config-git-init" }
            }
          },
          {
            "properties": {
              "type": { "const": "exec" },
              "config": { "$ref": "#/$defs/config-exec" }
            }
          },
          {
            "properties": {
              "type": { "const": "move" },
              "config": { "$ref": "#/$defs/config-move" }
            }
          },
          {
            "properties": {
              "type": { "const": "copy" },
              "config": { "$ref": "#/$defs/config-copy" }
            }
          },
          {
            "properties": {
              "type": { "const": "append" },
              "config": { "$ref": "#/$defs/config-append" }
            }
          },
          {
            "properties": {
              "type": { "const": "mkdir" },
              "config": { "$ref": "#/$defs/config-mkdir" }
            }
          }
        ]
      }
    }
  },
  "$defs": {
    "builtInTransformers": {
      "type": "string",
      "enum": [
        "lowercase",
        "uppercase",
        "trim",
        "slugify",
        "capitalize",
        "titlecase",
        "camelcase",
        "pascalcase",
        "snakecase",
        "kebabcase",
        "constantcase",
        "alphanumeric",
        "collapse-spaces",
        "remove-spaces",
        "urlencode",
        "dasherize",
        "underscore"
      ],
      "description": "Built-in transformer ID"
    },
    "enabled": {
      "description": "Whether this item should be executed/displayed. Can be a boolean, a string expression, or an object with executable or conditional configuration (optional, defaults to true).",
      "default": true,
      "oneOf": [
        {
          "type": "boolean",
          "description": "Static enabled state"
        },
        {
          "type": "string",
          "description": "JavaScript expression to evaluate."
        },
        {
          "type": "object",
          "description": "Conditional enabled configuration",
          "required": ["condition"],
          "properties": {
            "condition": {
              "type": "string",
              "description": "JavaScript expression to evaluate."
            }
          }
        },
        {
          "type": "object",
          "description": "Executable enabled configuration - determines enabled state by running a command",
          "required": ["type", "value"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["exec"],
              "description": "Type of enabled value. 'exec' executes a shell command to determine enabled state."
            },
            "value": {
              "type": "string",
              "description": "Shell command to execute. The command output will be trimmed and parsed as a boolean. Non-empty output or '1', 'true', 'yes' (case-insensitive) evaluates to true."
            }
          }
        }
      ]
    },
    "condition": {
      "type": "string",
      "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
    },
    "override": {
      "type": "string",
      "enum": ["merge", "replace"],
      "description": "Strategy for merging with base item when extending templates"
    },
    "promptItem": {
      "type": "object",
      "required": ["id", "type", "message"],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the prompt value (must be a valid JavaScript identifier: start with letter, underscore, or $, followed by letters, digits, underscores, or $)",
          "pattern": "^[a-zA-Z_$][a-zA-Z0-9_$]*$"
        },
        "type": {
          "type": "string",
          "enum": ["input", "select", "confirm", "password", "number"],
          "description": "Type of prompt to display"
        },
        "message": {
          "type": "string",
          "description": "Prompt message to display to the user"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the prompt value is required (cannot be empty)"
        },
        "enabled": { "$ref": "#/$defs/enabled" },
        "default": {
          "description": "Default value for the prompt. Can be a static value, an object with 'type' and 'value' properties for executable defaults, or a conditional default configuration.",
          "oneOf": [
            {
              "type": ["string", "number", "boolean"],
              "description": "Static default value (string, number, or boolean)"
            },
            {
              "type": "object",
              "description": "Default value configuration for executable or interpolate values",
              "required": ["type", "value"],
              "additionalProperties": false,
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["static", "exec", "interpolate"],
                  "description": "Type of default value. 'static' for explicit static values, 'exec' for command execution, 'interpolate' for interpolate strings with {{variable}} placeholders."
                },
                "value": {
                  "description": "For 'static' type: the static value. For 'exec' type: the shell command to execute. For 'interpolate' type: interpolate string with {{variable}} placeholders. Commands can be any shell command including git, npm, node, etc. The command output will be trimmed and auto-parsed as JSON, number, or boolean when applicable."
                }
              }
            },
            {
              "type": "object",
              "description": "Conditional default value configuration",
              "required": ["type", "condition", "ifTrue", "ifFalse"],
              "additionalProperties": false,
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["conditional"],
                  "description": "Type of default value. 'conditional' for condition-based defaults."
                },
                "condition": {
                  "type": "string",
                  "description": "JavaScript expression to evaluate. Can reference variables, prompts, and config values."
                },
                "ifTrue": {
                  "description": "Value to use if condition evaluates to true. Can be a static value or an object with type property for interpolation (e.g., { type: 'interpolate', value: '{{variable}}' })."
                },
                "ifFalse": {
                  "description": "Value to use if condition evaluates to false. Can be a static value or an object with type property for interpolation (e.g., { type: 'interpolate', value: '{{variable}}' })."
                }
              }
            }
          ]
        },
        "min": {
          "type": "number",
          "description": "Minimum value (for number prompts)"
        },
        "max": {
          "type": "number",
          "description": "Maximum value (for number prompts)"
        },
        "choices": {
          "type": "array",
          "description": "Available choices (for select prompts)",
          "items": {
            "type": "object",
            "required": ["name", "value"],
            "properties": {
              "name": {
                "type": "string",
                "description": "Display name for the choice"
              },
              "value": {
                "description": "Value to use when this choice is selected"
              }
            }
          }
        },
        "transformers": {
          "description": "Array of transformer(s) to apply to the prompt value after input. Each item can be a built-in transformer ID or a custom transformer ID.",
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/$defs/builtInTransformers" },
              {
                "type": "string",
                "description": "Custom transformer ID (references a transformer defined in the 'transformers' array)"
              }
            ]
          }
        },
        "override": {
          "type": "string",
          "enum": ["merge", "replace"],
          "description": "Strategy for merging with base prompt when extending templates. 'merge' (default) intelligently merges properties, 'replace' completely replaces the base prompt. Must be specified when prompt ID conflicts with base template."
        }
      }
    },
    "variableItem": {
      "type": "object",
      "required": ["id", "value"],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the variable (must be a valid JavaScript identifier: start with letter, underscore, or $, followed by letters, digits, underscores, or $)",
          "pattern": "^[a-zA-Z_$][a-zA-Z0-9_$]*$"
        },
        "value": {
          "description": "Variable value. Can be a static value or an object with 'type' and 'value' properties for executable values, or a conditional configuration.",
          "oneOf": [
            {
              "type": ["string", "number", "boolean"],
              "description": "Static value (string, number, or boolean)"
            },
            {
              "type": "object",
              "description": "Value configuration for static, executable, or interpolate values",
              "required": ["type"],
              "additionalProperties": false,
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["static", "exec", "interpolate"],
                  "description": "Type of value. 'static' for explicit static values, 'exec' for command execution, 'interpolate' for interpolate strings with {{variable}} placeholders."
                },
                "value": {
                  "description": "For 'static' type: the static value. For 'exec' type: the shell command to execute. For 'interpolate' type: interpolate string with {{variable}} placeholders. Commands output will be trimmed and auto-parsed as JSON, number, or boolean when applicable."
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "type": { "enum": ["static", "exec", "interpolate"] }
                    }
                  },
                  "then": {
                    "required": ["value"]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": { "const": "exec" }
                    }
                  },
                  "then": {
                    "properties": {
                      "value": {
                        "type": "string",
                        "description": "Shell command to execute"
                      }
                    }
                  }
                }
              ]
            },
            {
              "type": "object",
              "description": "Conditional value configuration",
              "required": ["type", "condition", "ifTrue", "ifFalse"],
              "additionalProperties": false,
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["conditional"],
                  "description": "Type of value. 'conditional' for condition-based values."
                },
                "condition": {
                  "type": "string",
                  "description": "JavaScript expression to evaluate. Can reference other variables, prompts, and config values."
                },
                "ifTrue": {
                  "description": "Value to use if condition evaluates to true. Can be a static value or an object with type property for interpolation (e.g., { type: 'interpolate', value: '{{variable}}' })."
                },
                "ifFalse": {
                  "description": "Value to use if condition evaluates to false. Can be a static value or an object with type property for interpolation (e.g., { type: 'interpolate', value: '{{variable}}' })."
                }
              }
            }
          ]
        },
        "transformers": {
          "description": "Array of transformer(s) to apply to the variable value after resolution. Each item can be a built-in transformer ID or a custom transformer ID.",
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/$defs/builtInTransformers" },
              {
                "type": "string",
                "description": "Custom transformer ID (references a transformer defined in the 'transformers' array)"
              }
            ]
          }
        },
        "override": {
          "type": "string",
          "enum": ["merge", "replace"],
          "description": "Strategy for merging with base variable when extending templates. 'merge' (default) replaces the value, 'replace' completely replaces the variable. Must be specified when variable ID conflicts with base template."
        }
      }
    },
    "transformerItem": {
      "type": "object",
      "required": ["id", "type"],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the transformer"
        },
        "name": {
          "type": "string",
          "description": "Optional display name for the transformer"
        },
        "description": {
          "type": "string",
          "description": "Optional description for the transformer"
        },
        "type": {
          "type": "string",
          "enum": [
            "regex",
            "computed",
            "lowercase",
            "uppercase",
            "trim",
            "slugify",
            "capitalize",
            "titlecase",
            "camelcase",
            "pascalcase",
            "snakecase",
            "kebabcase",
            "constantcase",
            "alphanumeric",
            "collapse-spaces",
            "remove-spaces",
            "urlencode",
            "dasherize",
            "underscore",
            "custom",
            "chain"
          ],
          "description": "Type of transformer"
        },
        "config": {
          "type": "object",
          "description": "Configuration specific to transformer type"
        }
      },
      "oneOf": [
        {
          "required": ["type"],
          "properties": {
            "type": { "const": "regex" },
            "config": {
              "type": "object",
              "required": ["pattern", "replacement"],
              "additionalProperties": false,
              "properties": {
                "pattern": {
                  "type": "string",
                  "description": "Regular expression pattern"
                },
                "flags": {
                  "type": "string",
                  "description": "Regex flags (g, i, m, etc.)",
                  "default": ""
                },
                "replacement": {
                  "type": "string",
                  "description": "Replacement string (can use $1, $2, etc.)"
                }
              }
            }
          }
        },
        {
          "required": ["type"],
          "properties": {
            "type": { "const": "computed" },
            "config": {
              "type": "object",
              "required": ["expression"],
              "additionalProperties": false,
              "properties": {
                "expression": {
                  "type": "string",
                  "description": "JavaScript expression to compute the transformed value"
                }
              }
            }
          }
        },
        {
          "required": ["type"],
          "properties": {
            "type": { "const": "custom" },
            "config": {
              "type": "object",
              "required": ["handler"],
              "additionalProperties": false,
              "properties": {
                "handler": {
                  "oneOf": [
                    { "type": "string", "description": "Function code as string" },
                    { "instanceof": "Function", "description": "Function object" }
                  ],
                  "description": "Custom transformation function"
                }
              }
            }
          }
        },
        {
          "required": ["type"],
          "properties": {
            "type": { "const": "chain" },
            "config": {
              "type": "object",
              "required": ["transformers"],
              "additionalProperties": false,
              "properties": {
                "transformers": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Array of transformer IDs to execute in sequence"
                }
              }
            }
          }
        },
        {
          "required": ["type"],
          "properties": {
            "type": { "$ref": "#/$defs/builtInTransformers" },
            "config": {
              "type": "object",
              "additionalProperties": false,
              "properties": {}
            }
          }
        }
      ]
    },
    "config-update-json": {
      "title": "Update JSON Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the JSON file to update"
        },
        "updates": {
          "type": "object",
          "description": "Key-value pairs to update (supports nested paths with dot notation)"
        },
        "condition": { "$ref": "#/$defs/condition" }
      },
      "required": ["file", "updates"]
    },
    "config-write": {
      "title": "Write Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the file to create or overwrite"
        },
        "template": {
          "type": "string",
          "description": "Inline template string with {{variable}} placeholders. Cannot be used with templateFile."
        },
        "templateFile": {
          "type": "string",
          "description": "Path to external template file (relative to project root). Files with .hbs extension automatically use Handlebars templating. Cannot be used with template."
        },
        "condition": { "$ref": "#/$defs/condition" },
        "allowCreate": {
          "type": "boolean",
          "description": "Whether to allow creating the file if it does not exist. Defaults to true.",
          "default": true
        }
      },
      "required": ["file"],
      "oneOf": [
        {
          "required": ["template"]
        },
        {
          "required": ["templateFile"]
        }
      ]
    },
    "config-create": {
      "title": "Create Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the file to create (will not overwrite if file already exists)"
        },
        "write": {
          "type": "string",
          "description": "Inline Write string with {{variable}} placeholders. Cannot be used with templateFile."
        },
        "templateFile": {
          "type": "string",
          "description": "Path to external Write file (relative to project root). Files with .hbs extension automatically use Handlebars templating. Cannot be used with template."
        },
        "condition": { "$ref": "#/$defs/condition" }
      },
      "required": ["file"],
      "oneOf": [
        {
          "required": ["write"]
        },
        {
          "required": ["templateFile"]
        }
      ]
    },
    "config-regex-replace": {
      "title": "Regex Replace Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the file to modify"
        },
        "pattern": {
          "type": "string",
          "description": "Regular expression pattern to find"
        },
        "flags": {
          "type": "string",
          "description": "Regex flags (e.g., 'g', 'gm', 'gi')"
        },
        "replacement": {
          "type": "string",
          "description": "String to replace matches with"
        },
        "condition": { "$ref": "#/$defs/condition" }
      },
      "required": ["file", "pattern", "replacement"]
    },
    "config-replace-in-file": {
      "title": "Replace In File Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the file to modify"
        },
        "replacements": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "find": {
                "type": "string",
                "description": "String to find"
              },
              "replace": {
                "type": "string",
                "description": "String to replace with"
              }
            },
            "required": ["find", "replace"]
          }
        },
        "condition": { "$ref": "#/$defs/condition" }
      },
      "required": ["file", "replacements"]
    },
    "config-delete": {
      "title": "Delete Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of file or directory paths to delete"
        },
        "condition": {
          "type": "string",
          "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
        }
      },
      "required": ["paths"]
    },
    "config-rename": {
      "title": "Rename Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "from": {
          "type": "string",
          "description": "Current file or directory path"
        },
        "to": {
          "type": "string",
          "description": "New file or directory path"
        },
        "condition": { "$ref": "#/$defs/condition" }
      },
      "required": ["from", "to"]
    },
    "config-git-init": {
      "title": "Git Init Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "removeExisting": {
          "type": "boolean",
          "description": "Whether to remove existing .git directory"
        },
        "initialCommit": {
          "type": "boolean",
          "description": "Whether to create an initial commit"
        },
        "message": {
          "type": "string",
          "description": "Initial commit message"
        },
        "condition": { "$ref": "#/$defs/condition" }
      },
      "required": ["removeExisting", "initialCommit"]
    },
    "config-exec": {
      "title": "Exec Config",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "Shell command to execute"
        },
        "cwd": {
          "type": "string",
          "description": "Working directory for the command"
        },
        "condition": { "$ref": "#/$defs/condition" }
      },
      "required": ["command"]
    },
    "config-move": {
      "title": "Move Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "from": {
          "type": "string",
          "description": "Current file or directory path"
        },
        "to": {
          "type": "string",
          "description": "New file or directory path"
        },
        "condition": { "$ref": "#/$defs/condition" }
      },
      "required": ["from", "to"]
    },
    "config-copy": {
      "title": "Copy Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "from": {
          "type": "string",
          "description": "Source file or directory path"
        },
        "to": {
          "type": "string",
          "description": "Destination file or directory path"
        },
        "condition": { "$ref": "#/$defs/condition" }
      },
      "required": ["from", "to"]
    },
    "config-append": {
      "title": "Append Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the file to append to"
        },
        "content": {
          "type": "string",
          "description": "Inline content string with {{variable}} placeholders. Cannot be used with templateFile."
        },
        "template": {
          "type": "string",
          "description": "Alias for content"
        },
        "templateFile": {
          "type": "string",
          "description": "Path to external template file (relative to project root). Files with .hbs extension automatically use Handlebars templating. Cannot be used with content."
        },
        "newline": {
          "type": "boolean",
          "description": "Add newline before appending (default: true)",
          "default": true
        },
        "condition": { "$ref": "#/$defs/condition" }
      },
      "required": ["file"],
      "oneOf": [
        {
          "required": ["content"]
        },
        {
          "required": ["template"]
        },
        {
          "required": ["templateFile"]
        }
      ]
    },
    "config-mkdir": {
      "title": "Mkdir Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "path": {
          "type": "string",
          "description": "Path to the directory to create"
        },
        "condition": { "$ref": "#/$defs/condition" }
      },
      "required": ["path"]
    }
  }
}
