{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Write Tasks Configuration",
  "description": "Configuration for Write task automation and cleanup",
  "type": "object",
  "required": ["$schema", "name"],
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "type": "string",
      "description": "JSON Schema dialect identifier"
    },
    "name": {
      "type": "string",
      "description": "Unique identifier name for this template. Must contain only lowercase letters, digits, and hyphens. Cannot start or end with a hyphen.",
      "pattern": "^[a-z\\d]+(?:-[a-z\\d]+)*$"
    },
    "description": {
      "type": "string",
      "description": "Detailed description of what this Write does"
    },
    "enabled": {
      "description": "Whether this template should be executed. Can be a boolean, a string expression, or an object with executable or conditional configuration (optional, defaults to true). If false or condition evaluates to false, the entire template (including prompts, variables, and tasks) will be skipped.",
      "default": true,
      "oneOf": [
        {
          "type": "boolean",
          "description": "Static enabled state"
        },
        {
          "type": "string",
          "description": "JavaScript expression to evaluate. Template only executes if expression evaluates to true."
        },
        {
          "type": "object",
          "description": "Conditional enabled configuration",
          "required": ["condition"],
          "properties": {
            "condition": {
              "type": "string",
              "description": "JavaScript expression to evaluate. Template only executes if condition evaluates to true. Has access to all variables and config values."
            }
          }
        },
        {
          "type": "object",
          "description": "Executable enabled configuration - determines enabled state by running a command",
          "required": ["type", "value"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["exec"],
              "description": "Type of enabled value. 'exec' executes a shell command to determine enabled state."
            },
            "value": {
              "type": "string",
              "description": "Shell command to execute. The command output will be trimmed and parsed as a boolean. Non-empty output or '1', 'true', 'yes' (case-insensitive) evaluates to true."
            }
          }
        }
      ]
    },
    "transformers": {
      "type": "array",
      "description": "Array of transformer definitions",
      "items": { "$ref": "#/$defs/transformerItem" }
    },
    "dependencies": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Names or identifiers of other templates that this Write depends on"
    },
    "extends": {
      "description": "Base Write file(s) to extend from. Can be a local path or URL (http/https). Supports single path or array of paths.",
      "oneOf": [
        {
          "type": "string",
          "description": "Single base Write path or URL"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of base Write paths or URLs"
        }
      ]
    },
    "variables": {
      "type": "array",
      "description": "Top-level global variables available to all tasks. Variables are resolved once at startup and do not require user interaction.",
      "items": { "$ref": "#/$defs/variableItem" }
    },
    "prompts": {
      "type": "array",
      "description": "Top-level global prompts collected once upfront and available to all tasks.",
      "items": { "$ref": "#/$defs/promptItem" }
    },
    "tasks": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["id", "name", "type", "config"],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the task"
          },
          "name": {
            "type": "string",
            "description": "Human-readable task name"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of what the task does (optional, defaults to empty string)"
          },
          "required": {
            "type": "boolean",
            "description": "Whether failure of this task should stop the process (optional, defaults to true)",
            "default": true
          },
          "enabled": {
            "description": "Whether this task should be executed. Can be a boolean, a string expression, or an object with executable or conditional configuration (optional, defaults to true).",
            "default": true,
            "oneOf": [
              {
                "type": "boolean",
                "description": "Static enabled state"
              },
              {
                "type": "string",
                "description": "JavaScript expression to evaluate. Task only executes if expression evaluates to true."
              },
              {
                "type": "object",
                "description": "Conditional enabled configuration",
                "required": ["condition"],
                "properties": {
                  "condition": {
                    "type": "string",
                    "description": "JavaScript expression to evaluate. Task only executes if condition evaluates to true. Has access to all variables and prompt values."
                  }
                }
              },
              {
                "type": "object",
                "description": "Executable enabled configuration - determines enabled state by running a command",
                "required": ["type", "value"],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["exec"],
                    "description": "Type of enabled value. 'exec' executes a shell command to determine enabled state."
                  },
                  "value": {
                    "type": "string",
                    "description": "Shell command to execute. The command output will be trimmed and parsed as a boolean. Non-empty output or '1', 'true', 'yes' (case-insensitive) evaluates to true."
                  }
                }
              }
            ]
          },
          "dependencies": {
            "type": "array",
            "items": { "type": "string" },
            "description": "IDs of tasks that must run before this one"
          },
          "override": {
            "type": "string",
            "enum": ["merge", "replace"],
            "description": "Strategy for merging with base task when extending templates"
          },
          "$sourceUrl": { "type": "string" },
          "type": {
            "type": "string",
            "enum": [
              "update-json",
              "write",
              "create",
              "regex-replace",
              "replace-in-file",
              "delete",
              "rename",
              "git-init",
              "exec"
            ],
            "description": "Type of task to execute"
          },
          "config": {
            "type": "object",
            "description": "Task-specific configuration"
          }
        },
        "oneOf": [
          {
            "properties": {
              "type": { "const": "update-json" },
              "config": { "$ref": "#/$defs/config-update-json" }
            }
          },
          {
            "properties": {
              "type": { "const": "write" },
              "config": { "$ref": "#/$defs/config-write" }
            }
          },
          {
            "properties": {
              "type": { "const": "create" },
              "config": { "$ref": "#/$defs/config-create" }
            }
          },
          {
            "properties": {
              "type": { "const": "regex-replace" },
              "config": { "$ref": "#/$defs/config-regex-replace" }
            }
          },
          {
            "properties": {
              "type": { "const": "replace-in-file" },
              "config": { "$ref": "#/$defs/config-replace-in-file" }
            }
          },
          {
            "properties": {
              "type": { "const": "delete" },
              "config": { "$ref": "#/$defs/config-delete" }
            }
          },
          {
            "properties": {
              "type": { "const": "rename" },
              "config": { "$ref": "#/$defs/config-rename" }
            }
          },
          {
            "properties": {
              "type": { "const": "git-init" },
              "config": { "$ref": "#/$defs/config-git-init" }
            }
          },
          {
            "properties": {
              "type": { "const": "exec" },
              "config": { "$ref": "#/$defs/config-exec" }
            }
          }
        ]
      }
    }
  },
  "$defs": {
    "promptItem": {
      "type": "object",
      "required": ["id", "type", "message"],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the prompt value (must be a valid JavaScript identifier: start with letter, underscore, or $, followed by letters, digits, underscores, or $)",
          "pattern": "^[a-zA-Z_$][a-zA-Z0-9_$]*$"
        },
        "type": {
          "type": "string",
          "enum": ["input", "select", "confirm", "password", "number"],
          "description": "Type of prompt to display"
        },
        "message": {
          "type": "string",
          "description": "Prompt message to display to the user"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the prompt value is required (cannot be empty)"
        },
        "enabled": {
          "description": "Whether this prompt should be displayed. Can be a boolean, a string expression, or an object with executable or conditional configuration (optional, defaults to true). If false or condition evaluates to false, the prompt will be skipped.",
          "default": true,
          "oneOf": [
            {
              "type": "boolean",
              "description": "Static enabled state"
            },
            {
              "type": "string",
              "description": "JavaScript expression to evaluate (shorthand for { condition: \"...\" }). Prompt only displays if expression evaluates to true."
            },
            {
              "type": "object",
              "description": "Conditional enabled configuration",
              "required": ["condition"],
              "properties": {
                "condition": {
                  "type": "string",
                  "description": "JavaScript expression to evaluate. Prompt only displays if condition evaluates to true. Has access to all variables and previously collected prompts."
                }
              }
            },
            {
              "type": "object",
              "description": "Executable enabled configuration - determines enabled state by running a command",
              "required": ["type", "value"],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["exec"],
                  "description": "Type of enabled value. 'exec' executes a shell command to determine enabled state."
                },
                "value": {
                  "type": "string",
                  "description": "Shell command to execute. The command output will be trimmed and parsed as a boolean. Non-empty output or '1', 'true', 'yes' (case-insensitive) evaluates to true."
                }
              }
            }
          ]
        },
        "default": {
          "description": "Default value for the prompt. Can be a static value, an object with 'type' and 'value' properties for executable defaults, or a conditional default configuration.",
          "oneOf": [
            {
              "description": "Static default value (string, number, or boolean)"
            },
            {
              "type": "object",
              "description": "Default value configuration for static or executable values",
              "required": ["type", "value"],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["static", "exec", "interpolate"],
                  "description": "Type of default value. 'static' for explicit static values, 'exec' for command execution, 'interpolate' for interpolate strings with {{variable}} placeholders."
                },
                "value": {
                  "description": "For 'static' type: the static value. For 'exec' type: the shell command to execute. For 'interpolate' type: interpolate string with {{variable}} placeholders. Commands can be any shell command including git, npm, node, etc. The command output will be trimmed and auto-parsed as JSON, number, or boolean when applicable."
                }
              }
            },
            {
              "type": "object",
              "description": "Conditional default value configuration",
              "required": ["type", "condition", "ifTrue", "ifFalse"],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["conditional"],
                  "description": "Type of default value. 'conditional' for condition-based defaults."
                },
                "condition": {
                  "type": "string",
                  "description": "JavaScript expression to evaluate. Can reference variables, prompts, and config values."
                },
                "ifTrue": {
                  "description": "Value to use if condition evaluates to true. Can be a static value or an object with type property for interpolation (e.g., { type: 'interpolate', value: '{{variable}}' })."
                },
                "ifFalse": {
                  "description": "Value to use if condition evaluates to false. Can be a static value or an object with type property for interpolation (e.g., { type: 'interpolate', value: '{{variable}}' })."
                }
              }
            }
          ]
        },
        "min": {
          "type": "number",
          "description": "Minimum value (for number prompts)"
        },
        "max": {
          "type": "number",
          "description": "Maximum value (for number prompts)"
        },
        "choices": {
          "type": "array",
          "description": "Available choices (for select prompts)",
          "items": {
            "type": "object",
            "required": ["name", "value"],
            "properties": {
              "name": {
                "type": "string",
                "description": "Display name for the choice"
              },
              "value": {
                "description": "Value to use when this choice is selected"
              }
            }
          }
        },
        "transformers": {
          "description": "Array of transformer(s) to apply to the prompt value after input. Each item is a transformer ID.",
          "type": "array",
          "items": { "type": "string" }
        },
        "override": {
          "type": "string",
          "enum": ["merge", "replace"],
          "description": "Strategy for merging with base prompt when extending templates. 'merge' (default) intelligently merges properties, 'replace' completely replaces the base prompt. Must be specified when prompt ID conflicts with base template."
        }
      }
    },
    "variableItem": {
      "type": "object",
      "required": ["id", "value"],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the variable (must be a valid JavaScript identifier: start with letter, underscore, or $, followed by letters, digits, underscores, or $)",
          "pattern": "^[a-zA-Z_$][a-zA-Z0-9_$]*$"
        },
        "value": {
          "description": "Variable value. Can be a static value or an object with 'type' and 'value' properties for executable values, or a conditional configuration.",
          "oneOf": [
            {
              "description": "Static value (string, number, or boolean)"
            },
            {
              "type": "object",
              "description": "Value configuration for static, executable, or conditional values",
              "required": ["type"],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["static", "exec", "conditional", "interpolate"],
                  "description": "Type of value. 'static' for explicit static values, 'exec' for command execution, 'conditional' for condition-based values, 'interpolate' for interpolate strings with {{variable}} placeholders."
                },
                "value": {
                  "description": "For 'static' type: the static value. For 'exec' type: the shell command to execute. For 'interpolate' type: interpolate string with {{variable}} placeholders. Commands output will be trimmed and auto-parsed as JSON, number, or boolean when applicable. Not used for 'conditional' type."
                },
                "condition": {
                  "type": "string",
                  "description": "For 'conditional' type: JavaScript expression to evaluate. Can reference other variables, prompts, and config values."
                },
                "ifTrue": {
                  "description": "For 'conditional' type: Value to use if condition evaluates to true. Can be a static value or an object with type property for interpolation (e.g., { type: 'interpolate', value: '{{variable}}' })."
                },
                "ifFalse": {
                  "description": "For 'conditional' type: Value to use if condition evaluates to false. Can be a static value or an object with type property for interpolation (e.g., { type: 'interpolate', value: '{{variable}}' })."
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "type": { "enum": ["static", "exec", "interpolate"] }
                    }
                  },
                  "then": {
                    "required": ["value"]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": { "const": "exec" }
                    }
                  },
                  "then": {
                    "properties": {
                      "value": {
                        "type": "string",
                        "description": "Shell command to execute"
                      }
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": { "const": "conditional" }
                    }
                  },
                  "then": {
                    "required": ["condition", "ifTrue", "ifFalse"]
                  }
                }
              ]
            }
          ]
        },
        "transformers": {
          "description": "Array of transformer(s) to apply to the variable value after resolution. Each item is a transformer ID.",
          "type": "array",
          "items": { "type": "string" }
        },
        "override": {
          "type": "string",
          "enum": ["merge", "replace"],
          "description": "Strategy for merging with base variable when extending templates. 'merge' (default) replaces the value, 'replace' completely replaces the variable. Must be specified when variable ID conflicts with base template."
        }
      }
    },
    "transformerItem": {
      "type": "object",
      "required": ["id", "type"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the transformer"
        },
        "name": {
          "type": "string",
          "description": "Optional display name for the transformer"
        },
        "description": {
          "type": "string",
          "description": "Optional description for the transformer"
        },
        "type": {
          "type": "string",
          "enum": [
            "regex",
            "computed",
            "lowercase",
            "uppercase",
            "trim",
            "slugify",
            "capitalize",
            "titlecase",
            "camelcase",
            "pascalcase",
            "snakecase",
            "kebabcase",
            "constantcase",
            "alphanumeric",
            "collapse-spaces",
            "remove-spaces",
            "urlencode",
            "dasherize",
            "underscore",
            "custom",
            "chain"
          ],
          "description": "Type of transformer"
        },
        "config": {
          "type": "object",
          "description": "Configuration specific to transformer type",
          "allOf": [
            {
              "if": {
                "properties": {
                  "type": { "const": "regex" }
                }
              },
              "then": {
                "properties": {
                  "pattern": {
                    "type": "string",
                    "description": "Regular expression pattern"
                  },
                  "flags": {
                    "type": "string",
                    "description": "Regex flags (g, i, m, etc.)",
                    "default": ""
                  },
                  "replacement": {
                    "type": "string",
                    "description": "Replacement string (can use $1, $2, etc.)"
                  }
                },
                "required": ["pattern", "replacement"]
              }
            },
            {
              "if": {
                "properties": {
                  "type": { "const": "computed" }
                }
              },
              "then": {
                "properties": {
                  "expression": {
                    "type": "string",
                    "description": "JavaScript expression to compute the transformed value"
                  }
                },
                "required": ["expression"]
              }
            },
            {
              "if": {
                "properties": {
                  "type": { "const": "custom" }
                }
              },
              "then": {
                "properties": {
                  "handler": {
                    "oneOf": [
                      { "type": "string", "description": "Function code as string" },
                      { "instanceof": "Function", "description": "Function object" }
                    ],
                    "description": "Custom transformation function"
                  }
                },
                "required": ["handler"]
              }
            },
            {
              "if": {
                "properties": {
                  "type": { "const": "chain" }
                }
              },
              "then": {
                "properties": {
                  "transformers": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "Array of transformer IDs to execute in sequence"
                  }
                },
                "required": ["transformers"]
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "enum": [
                      "lowercase",
                      "uppercase",
                      "trim",
                      "slugify",
                      "capitalize",
                      "titlecase",
                      "camelcase",
                      "pascalcase",
                      "snakecase",
                      "kebabcase",
                      "constantcase",
                      "alphanumeric",
                      "collapse-spaces",
                      "remove-spaces",
                      "urlencode",
                      "dasherize",
                      "underscore"
                    ]
                  }
                }
              },
              "then": {
                "properties": {},
                "additionalProperties": false
              }
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "config-update-json": {
      "title": "Update JSON Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the JSON file to update"
        },
        "updates": {
          "type": "object",
          "description": "Key-value pairs to update (supports nested paths with dot notation)"
        },
        "condition": {
          "type": "string",
          "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
        }
      },
      "required": ["file", "updates"]
    },
    "config-write": {
      "title": "Write Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the file to create or overwrite"
        },
        "template": {
          "type": "string",
          "description": "Inline template string with {{variable}} placeholders. Cannot be used with templateFile."
        },
        "templateFile": {
          "type": "string",
          "description": "Path to external template file (relative to project root). Files with .hbs extension automatically use Handlebars templating. Cannot be used with template."
        },
        "condition": {
          "type": "string",
          "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
        },
        "allowCreate": {
          "type": "boolean",
          "description": "Whether to allow creating the file if it does not exist. Defaults to true.",
          "default": true
        }
      },
      "required": ["file"],
      "oneOf": [
        {
          "required": ["template"]
        },
        {
          "required": ["templateFile"]
        }
      ]
    },
    "config-create": {
      "title": "Create Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the file to create (will not overwrite if file already exists)"
        },
        "write": {
          "type": "string",
          "description": "Inline Write string with {{variable}} placeholders. Cannot be used with templateFile."
        },
        "templateFile": {
          "type": "string",
          "description": "Path to external Write file (relative to project root). Files with .hbs extension automatically use Handlebars templating. Cannot be used with template."
        },
        "condition": {
          "type": "string",
          "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
        }
      },
      "required": ["file"],
      "oneOf": [
        {
          "required": ["write"]
        },
        {
          "required": ["templateFile"]
        }
      ]
    },
    "config-regex-replace": {
      "title": "Regex Replace Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the file to modify"
        },
        "pattern": {
          "type": "string",
          "description": "Regular expression pattern to find"
        },
        "flags": {
          "type": "string",
          "description": "Regex flags (e.g., 'g', 'gm', 'gi')"
        },
        "replacement": {
          "type": "string",
          "description": "String to replace matches with"
        },
        "condition": {
          "type": "string",
          "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
        }
      },
      "required": ["file", "pattern", "replacement"]
    },
    "config-replace-in-file": {
      "title": "Replace In File Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the file to modify"
        },
        "replacements": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "find": {
                "type": "string",
                "description": "String to find"
              },
              "replace": {
                "type": "string",
                "description": "String to replace with"
              }
            },
            "required": ["find", "replace"]
          }
        },
        "condition": {
          "type": "string",
          "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
        }
      },
      "required": ["file", "replacements"]
    },
    "config-delete": {
      "title": "Delete Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of file or directory paths to delete"
        },
        "condition": {
          "type": "string",
          "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
        }
      },
      "required": ["paths"]
    },
    "config-rename": {
      "title": "Rename Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "from": {
          "type": "string",
          "description": "Current file or directory path"
        },
        "to": {
          "type": "string",
          "description": "New file or directory path"
        },
        "condition": {
          "type": "string",
          "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
        }
      },
      "required": ["from", "to"]
    },
    "config-git-init": {
      "title": "Git Init Config",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "removeExisting": {
          "type": "boolean",
          "description": "Whether to remove existing .git directory"
        },
        "initialCommit": {
          "type": "boolean",
          "description": "Whether to create an initial commit"
        },
        "message": {
          "type": "string",
          "description": "Initial commit message"
        },
        "condition": {
          "type": "string",
          "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
        }
      },
      "required": ["removeExisting", "initialCommit"]
    },
    "config-exec": {
      "title": "Exec Config",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "Shell command to execute"
        },
        "cwd": {
          "type": "string",
          "description": "Working directory for the command"
        },
        "condition": {
          "type": "string",
          "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
        }
      },
      "required": ["command"]
    }
  }
}
