{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Template Tasks Configuration",
  "description": "Configuration for template task automation and cleanup",
  "type": "object",
  "required": ["name"],
  "properties": {
    "name": {
      "type": "string",
      "description": "Unique identifier name for this template. Must contain only lowercase letters, digits, and hyphens. Cannot start or end with a hyphen.",
      "pattern": "^[a-z\\d]+(?:-[a-z\\d]+)*$"
    },
    "description": {
      "type": "string",
      "description": "Detailed description of what this template does"
    },
    "dependencies": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Names or identifiers of other templates that this template depends on"
    },
    "extends": {
      "description": "Base template file(s) to extend from. Can be a local path or URL (http/https). Supports single path or array of paths.",
      "oneOf": [
        {
          "type": "string",
          "description": "Single base template path or URL"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of base template paths or URLs"
        }
      ]
    },
    "variables": {
      "type": "array",
      "description": "Top-level global variables available to all tasks. Variables are resolved once at startup and do not require user interaction.",
      "items": {
        "type": "object",
        "required": ["id", "value"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the variable (must be a valid JavaScript identifier)",
            "pattern": "^[\\w$]+$"
          },
          "value": {
            "description": "Variable value. Can be a static value or an object with 'type' and 'value' properties for executable values.",
            "oneOf": [
              {
                "description": "Static value (string, number, or boolean)"
              },
              {
                "type": "object",
                "description": "Value configuration for static or executable values",
                "required": ["type", "value"],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["static", "exec"],
                    "description": "Type of value. 'static' for explicit static values, 'exec' for command execution."
                  },
                  "value": {
                    "description": "For 'static' type: the static value. For 'exec' type: the shell command to execute. Commands output will be trimmed and auto-parsed as JSON, number, or boolean when applicable."
                  }
                }
              }
            ]
          },
          "override": {
            "type": "string",
            "enum": ["merge", "replace"],
            "description": "Strategy for merging with base variable when extending templates. 'merge' (default) replaces the value, 'replace' completely replaces the variable. Must be specified when variable ID conflicts with base template."
          }
        }
      }
    },
    "prompts": {
      "type": "array",
      "description": "Top-level global prompts collected once upfront and available to all tasks.",
      "items": {
        "type": "object",
        "required": ["id", "type", "message"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the prompt value (alphanumeric, underscores, and hyphens only)",
            "pattern": "^[\\w-]+$"
          },
          "type": {
            "type": "string",
            "enum": ["input", "select", "confirm", "password", "number"],
            "description": "Type of prompt to display"
          },
          "message": {
            "type": "string",
            "description": "Prompt message to display to the user"
          },
          "required": {
            "type": "boolean",
            "description": "Whether the prompt value is required (cannot be empty)"
          },
          "enabled": {
            "description": "Whether this prompt should be displayed. Can be a boolean or a conditional expression based on variables or other prompt values.",
            "oneOf": [
              {
                "type": "boolean",
                "description": "Static enabled state"
              },
              {
                "type": "object",
                "description": "Conditional enabled configuration",
                "required": ["condition"],
                "properties": {
                  "condition": {
                    "type": "string",
                    "description": "JavaScript expression to evaluate. Prompt only displays if condition evaluates to true. Has access to all variables and previously collected prompts."
                  }
                }
              }
            ]
          },
          "default": {
            "description": "Default value for the prompt. Can be a static value or an object with 'type' and 'value' properties for executable defaults.",
            "oneOf": [
              {
                "description": "Static default value (string, number, or boolean)"
              },
              {
                "type": "object",
                "description": "Default value configuration for static or executable values",
                "required": ["type", "value"],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["static", "exec"],
                    "description": "Type of default value. 'static' for explicit static values, 'exec' for command execution."
                  },
                  "value": {
                    "description": "For 'static' type: the static value. For 'exec' type: the shell command to execute. Commands can be any shell command including git, npm, node, etc. The command output will be trimmed and auto-parsed as JSON, number, or boolean when applicable."
                  }
                }
              }
            ]
          },
          "placeholder": {
            "type": "string",
            "description": "Placeholder text (for input prompts)"
          },
          "min": {
            "type": "number",
            "description": "Minimum value (for number prompts)"
          },
          "max": {
            "type": "number",
            "description": "Maximum value (for number prompts)"
          },
          "choices": {
            "type": "array",
            "description": "Available choices (for select prompts)",
            "items": {
              "type": "object",
              "required": ["name", "value"],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Display name for the choice"
                },
                "value": {
                  "description": "Value to use when this choice is selected"
                }
              }
            }
          },
          "override": {
            "type": "string",
            "enum": ["merge", "replace"],
            "description": "Strategy for merging with base prompt when extending templates. 'merge' (default) intelligently merges properties, 'replace' completely replaces the base prompt. Must be specified when prompt ID conflicts with base template."
          }
        }
      }
    },
    "tasks": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["id", "name", "type"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the task"
          },
          "name": {
            "type": "string",
            "description": "Human-readable task name"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of what the task does (optional, defaults to empty string)"
          },
          "required": {
            "type": "boolean",
            "description": "Whether failure of this task should stop the process (optional, defaults to true)",
            "default": true
          },
          "enabled": {
            "description": "Whether this task should be executed. Can be a boolean or a conditional expression based on variables or prompt values (optional, defaults to true).",
            "default": true,
            "oneOf": [
              {
                "type": "boolean",
                "description": "Static enabled state"
              },
              {
                "type": "object",
                "description": "Conditional enabled configuration",
                "required": ["condition"],
                "properties": {
                  "condition": {
                    "type": "string",
                    "description": "JavaScript expression to evaluate. Task only executes if condition evaluates to true. Has access to all variables and prompt values."
                  }
                }
              }
            ]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of tasks that must run before this one"
          },
          "override": {
            "type": "string",
            "enum": ["merge", "replace"],
            "description": "Strategy for merging with base task when extending templates. 'merge' (default) intelligently merges properties, 'replace' completely replaces the base task. Must be specified when task ID conflicts with base template."
          },
          "prompts": {
            "type": "array",
            "description": "Task-specific prompts collected only when this task runs. For prompts shared across tasks, use top-level prompts instead.",
            "items": {
              "type": "object",
              "required": ["id", "type", "message"],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the prompt value (alphanumeric, underscores, and hyphens only)",
                  "pattern": "^[\\w-]+$"
                },
                "type": {
                  "type": "string",
                  "enum": ["input", "select", "confirm", "password", "number"],
                  "description": "Type of prompt to display"
                },
                "message": {
                  "type": "string",
                  "description": "Prompt message to display to the user"
                },
                "required": {
                  "type": "boolean",
                  "description": "Whether the prompt value is required (cannot be empty)"
                },
                "enabled": {
                  "description": "Whether this prompt should be displayed. Can be a boolean or a conditional expression based on variables or other prompt values.",
                  "oneOf": [
                    {
                      "type": "boolean",
                      "description": "Static enabled state"
                    },
                    {
                      "type": "object",
                      "description": "Conditional enabled configuration",
                      "required": ["condition"],
                      "properties": {
                        "condition": {
                          "type": "string",
                          "description": "JavaScript expression to evaluate. Prompt only displays if condition evaluates to true. Has access to all variables and previously collected prompts."
                        }
                      }
                    }
                  ]
                },
                "default": {
                  "description": "Default value for the prompt. Can be a static value or an object with 'type' and 'value' properties for executable defaults.",
                  "oneOf": [
                    {
                      "description": "Static default value (string, number, or boolean)"
                    },
                    {
                      "type": "object",
                      "description": "Default value configuration for static or executable values",
                      "required": ["type", "value"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": ["static", "exec"],
                          "description": "Type of default value. 'static' for explicit static values, 'exec' for command execution."
                        },
                        "value": {
                          "description": "For 'static' type: the static value. For 'exec' type: the shell command to execute. Commands can be any shell command including git, npm, node, etc. The command output will be trimmed and auto-parsed as JSON, number, or boolean when applicable."
                        }
                      }
                    }
                  ]
                },
                "placeholder": {
                  "type": "string",
                  "description": "Placeholder text (for input prompts)"
                },
                "min": {
                  "type": "number",
                  "description": "Minimum value (for number prompts)"
                },
                "max": {
                  "type": "number",
                  "description": "Maximum value (for number prompts)"
                },
                "choices": {
                  "type": "array",
                  "description": "Available choices (for select prompts)",
                  "items": {
                    "type": "object",
                    "required": ["name", "value"],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Display name for the choice"
                      },
                      "value": {
                        "description": "Value to use when this choice is selected"
                      }
                    }
                  }
                }
              }
            }
          },
          "variables": {
            "type": "array",
            "description": "Task-scoped variables available only to this specific task. Variables are resolved once at startup and do not require user interaction. For variables shared across tasks, use top-level variables instead.",
            "items": {
              "type": "object",
              "required": ["id", "value"],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the variable (must be a valid JavaScript identifier)",
                  "pattern": "^[\\w$]+$"
                },
                "value": {
                  "description": "Variable value. Can be a static value or an object with 'type' and 'value' properties for executable values.",
                  "oneOf": [
                    {
                      "description": "Static value (string, number, or boolean)"
                    },
                    {
                      "type": "object",
                      "description": "Value configuration for static or executable values",
                      "required": ["type", "value"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": ["static", "exec"],
                          "description": "Type of value. 'static' for explicit static values, 'exec' for command execution."
                        },
                        "value": {
                          "description": "For 'static' type: the static value. For 'exec' type: the shell command to execute. Commands output will be trimmed and auto-parsed as JSON, number, or boolean when applicable."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "update-json",
              "template",
              "create",
              "regex-replace",
              "replace-in-file",
              "delete",
              "rename",
              "git-init",
              "exec"
            ],
            "description": "Type of task to execute"
          },
          "config": {
            "type": "object",
            "description": "Task-specific configuration",
            "oneOf": [
              {
                "title": "Update JSON Config",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Path to the JSON file to update"
                  },
                  "updates": {
                    "type": "object",
                    "description": "Key-value pairs to update (supports nested paths with dot notation)"
                  },
                  "condition": {
                    "type": "string",
                    "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
                  }
                },
                "required": ["file", "updates"]
              },
              {
                "title": "Template Config",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Path to the file to create or overwrite"
                  },
                  "template": {
                    "type": "string",
                    "description": "Inline template string with {{variable}} placeholders. Cannot be used with templateFile."
                  },
                  "templateFile": {
                    "type": "string",
                    "description": "Path to external template file (relative to project root). Files with .hbs extension automatically use Handlebars templating. Cannot be used with template."
                  },
                  "condition": {
                    "type": "string",
                    "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
                  }
                },
                "required": ["file"],
                "oneOf": [
                  {
                    "required": ["template"]
                  },
                  {
                    "required": ["templateFile"]
                  }
                ]
              },
              {
                "title": "Create Config",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Path to the file to create (will not overwrite if file already exists)"
                  },
                  "template": {
                    "type": "string",
                    "description": "Inline template string with {{variable}} placeholders. Cannot be used with templateFile."
                  },
                  "templateFile": {
                    "type": "string",
                    "description": "Path to external template file (relative to project root). Files with .hbs extension automatically use Handlebars templating. Cannot be used with template."
                  },
                  "condition": {
                    "type": "string",
                    "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
                  }
                },
                "required": ["file"],
                "oneOf": [
                  {
                    "required": ["template"]
                  },
                  {
                    "required": ["templateFile"]
                  }
                ]
              },
              {
                "title": "Regex Replace Config",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Path to the file to modify"
                  },
                  "pattern": {
                    "type": "string",
                    "description": "Regular expression pattern to find"
                  },
                  "flags": {
                    "type": "string",
                    "description": "Regex flags (e.g., 'g', 'gm', 'gi')"
                  },
                  "replacement": {
                    "type": "string",
                    "description": "String to replace matches with"
                  },
                  "condition": {
                    "type": "string",
                    "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
                  }
                },
                "required": ["file", "pattern", "replacement"]
              },
              {
                "title": "Replace In File Config",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Path to the file to modify"
                  },
                  "replacements": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "find": {
                          "type": "string",
                          "description": "String to find"
                        },
                        "replace": {
                          "type": "string",
                          "description": "String to replace with"
                        }
                      },
                      "required": ["find", "replace"]
                    }
                  },
                  "condition": {
                    "type": "string",
                    "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
                  }
                },
                "required": ["file", "replacements"]
              },
              {
                "title": "Delete Config",
                "properties": {
                  "paths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of file or directory paths to delete"
                  },
                  "condition": {
                    "type": "string",
                    "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
                  }
                },
                "required": ["paths"]
              },
              {
                "title": "Rename Config",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "Current file or directory path"
                  },
                  "to": {
                    "type": "string",
                    "description": "New file or directory path"
                  },
                  "condition": {
                    "type": "string",
                    "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
                  }
                },
                "required": ["from", "to"]
              },
              {
                "title": "Git Init Config",
                "properties": {
                  "removeExisting": {
                    "type": "boolean",
                    "description": "Whether to remove existing .git directory"
                  },
                  "initialCommit": {
                    "type": "boolean",
                    "description": "Whether to create an initial commit"
                  },
                  "message": {
                    "type": "string",
                    "description": "Initial commit message"
                  },
                  "condition": {
                    "type": "string",
                    "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
                  }
                },
                "required": ["removeExisting", "initialCommit"]
              },
              {
                "title": "Exec Config",
                "properties": {
                  "command": {
                    "type": "string",
                    "description": "Shell command to execute"
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Working directory for the command"
                  },
                  "condition": {
                    "type": "string",
                    "description": "Optional JavaScript expression to evaluate. Task only executes if condition evaluates to true."
                  }
                },
                "required": ["command"]
              }
            ]
          }
        }
      }
    }
  }
}
